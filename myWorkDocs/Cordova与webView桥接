
###### cordova增加封装，将自定义的webView继承SystemWebView，传递到cordova中，当前布局无需改变。

1.WAP页面调用方式不变:bridge.send()

2、WebView继承于WapWebView（SystemWebView）

布局定义

![Alt text](/wap处理cordova/plugin2.png)

或 类继承

![Alt text](/wap处理cordova/plugin3.png)

以上需要更改当前WebView的继承类

Wap页中的WebView替换为CordovaActivity的CordovaWebView

  WapSalesWebViewClient、WebChromeClient 需要处理

需将WebViewClient继承SystemWebViewClient重写相关方法

![Alt text](/wap处理cordova/plugin5.png)

替换WebChromeClient继承对象为 SystemWebChromeClient

![Alt text](/wap处理cordova/plugin6.png)

替换WebClient继承对象为 SystemWebClient

![Alt text](/wap处理cordova/plugin7.png)

3.Wap页所在的Activity 统一继承 CordovaActivity封装类

![Alt text](/wap处理cordova/plugin1.png)

传递webView对象 super.init(WapWebView webView)
将webView的loadUrl()方法替换为CordovaActvity的loadUrl函数

4、回调函数，返回调用

5、本地动态注入或远程加载cordova.js相关的一系列文件

6、wap页引入<script>标签 或 需要我们这边注入标签（页面加载完后再注入，页面加载速度慢）

~~~javascript
  <script src="/corodva_wap/cordova.js">
~~~
